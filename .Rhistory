Q9 = sqrt( (2*l*(K + p*nR8)) / h )
R9 <- -log(1- (1-((Q9*h)/(p*l))) )/lambda
expectedShortUnitsExp <- integrate(function(y) { (y - R9)*(lambda)*exp(-(lambda)*y) }, lower = R9, upper = Inf)
nR9 <- expectedShortUnitsExp$value
#j = 10
Q10 = sqrt( (2*l*(K + p*nR9)) / h )
R10 <- -log(1- (1-((Q10*h)/(p*l))) )/lambda
expectedShortUnitsExp <- integrate(function(y) { (y - R10)*(lambda)*exp(-(lambda)*y) }, lower = R10, upper = Inf)
nR10 <- expectedShortUnitsExp$value
## Policy
Qopt = Q10
Ropt = R10
nRopt = nR10
#### b) ---------
beta = 1-(nRopt/Qopt)
# ------> DATA
noPeriods <- 5
demand <- c(20,10,200,120,15)
unitCost <- rep(0,noPeriods)
orderingCost <- c(110,120,200,200,200)
holdingCost <- c(2,0.4,1.8,2,2)
#------------------------------------
# Peterson-Silver Rule
V <- ((noPeriods*sum(demand^2))/(sum(demand)^2)) - 1
# ------> DATA
noPeriods <- 5
demand <- c(20,10,200,120,15)
unitCost <- rep(0,noPeriods)
orderingCost <- c(110,120,200,200,200)
holdingCost <- c(2,0.4,1.8,2,2)
#------------------------------------
# Peterson-Silver Rule
V <- ((noPeriods*sum(demand^2))/(sum(demand)^2)) - 1
## FORWARD OPERATIONS ---------------
table <- matrix(0, nrow = noPeriods+1, ncol = noPeriods)
for(t in 1:noPeriods){
l <- t
while (l <= noPeriods ){
prodCost = unitCost[t]*sum(demand[t:l])
ordering = orderingCost[t]
if (t == 1){
lastOptimum = 0
}else{
lastOptimum = min(table[noPeriods+1,t-1])
}
if(t < l){
h = 0
for(i in (t+1):l){
costH = holdingCost[i-1]*sum(demand[i:l])
h = h + costH
}
table[t,l] = prodCost + ordering + h + lastOptimum
}else if(t == l){
table[t,l] = prodCost + ordering + lastOptimum
}
l = l + 1
}
table[noPeriods+1,t] = min(table[,t][table[,t]>0])
}
print(paste0("The minimum cost is ", min(table[noPeriods+1,noPeriods])))
print(table)
## BACKWARD OPERATIONS
periodQ <- vector(mode = "numeric")
tableBackward <- data.frame(table[-(noPeriods+1),])
minCostPeriod = min(tableBackward[,noPeriods][which(tableBackward[,noPeriods] > 0)])
vectorIndexes = which(tableBackward[,noPeriods] == minCostPeriod)
ifelse(length(vectorIndexes)!= 1, print("The problem has at least two solutions"), print(''))
index = vectorIndexes[1]
periodQ <- append(periodQ, index)
while( index != 1){
minCostPeriod = min(tableBackward[,index-1][which(tableBackward[,index-1] > 0)])
vectorIndexes = which(tableBackward[,index-1] == minCostPeriod)
ifelse(length(vectorIndexes) != 1, print("The problem has at least two solutions"), print(''))
index <- vectorIndexes[1]
periodQ <- append(periodQ, index)
}
revPeriodQ <- rev(periodQ)
quantityToOrder <- rep(0,noPeriods)
for(i in 1:(length(revPeriodQ)-1)){
from <- revPeriodQ[i]
to <- revPeriodQ[i+1]-1
quantityToOrder[from] <- sum(demand[from:to])
}
if( revPeriodQ[length(revPeriodQ)] == noPeriods){
quantityToOrder[noPeriods] <- demand[length(demand)]
}else{
quantityToOrder[ revPeriodQ[length(revPeriodQ)] ] = sum(demand[revPeriodQ[length(revPeriodQ)]:noPeriods])
}
#print(quantityToOrder)
# --- COSTS PER PERIOD ----
inventory <- rep(0, noPeriods)#units
orderCost <- rep(0, noPeriods)
for(i in 1:noPeriods){
if( i == 1 ){
invLastPeriod = 0;
}else{
invLastPeriod =  inventory[i-1] ;
}
inventory[i] = invLastPeriod + quantityToOrder[i] - demand[i]
if(quantityToOrder[i] != 0){
orderCost[i] = orderingCost[i]
}
}
prodCost <- unitCost*quantityToOrder
invCost <- inventory*holdingCost
totalCostPerPeriod <- prodCost+orderCost+invCost
if(sum(totalCostPerPeriod) == min(table[noPeriods+1,noPeriods])){
print("The algorith is run correctly")
}else{
print('There is a problema the cost of the forward and backward operatios are not the same')
}
# Print the table
printableTable <- data.frame(
demand,
quantityToOrder,
inventory,
prodCost,
orderCost,
invCost,
totalCostPerPeriod
)
printableTableTranspose <- as.data.frame(t(as.matrix(printableTable)))
rownames(printableTableTranspose) <- c('Demand','Q','Inventory','Production Cost','Order Cost','Inventory Cost',"Total Cost")
colnames(printableTableTranspose) <- seq(1,noPeriods, by = 1)
print(paste0('The total cost per period is ', sum(totalCostPerPeriod)))
print(printableTableTranspose)
# ------> DATA
noPeriods <- 5
demand <- c(20,10,200,120,15)
unitCost <- rep(0,noPeriods)
orderingCost <- c(110,120,200,200,200)
holdingCost <- c(2,0.4,1.8,2,2)
#------------------------------------
# Peterson-Silver Rule
V <- ((noPeriods*sum(demand^2))/(sum(demand)^2)) - 1
## FORWARD OPERATIONS ---------------
table <- matrix(0, nrow = noPeriods+1, ncol = noPeriods)
for(t in 1:noPeriods){
l <- t
while (l <= noPeriods ){
prodCost = unitCost[t]*sum(demand[t:l])
ordering = orderingCost[t]
if (t == 1){
lastOptimum = 0
}else{
lastOptimum = min(table[noPeriods+1,t-1])
}
if(t < l){
h = 0
for(i in (t+1):l){
costH = holdingCost[i-1]*sum(demand[i:l])
h = h + costH
}
table[t,l] = prodCost + ordering + h + lastOptimum
}else if(t == l){
table[t,l] = prodCost + ordering + lastOptimum
}
l = l + 1
}
table[noPeriods+1,t] = min(table[,t][table[,t]>0])
}
print(paste0("The minimum cost is ", min(table[noPeriods+1,noPeriods])))
print(table)
## BACKWARD OPERATIONS
periodQ <- vector(mode = "numeric")
tableBackward <- data.frame(table[-(noPeriods+1),])
minCostPeriod = min(tableBackward[,noPeriods][which(tableBackward[,noPeriods] > 0)])
vectorIndexes = which(tableBackward[,noPeriods] == minCostPeriod)
ifelse(length(vectorIndexes)!= 1, print("The problem has at least two solutions"), print(''))
index = vectorIndexes[1]
periodQ <- append(periodQ, index)
while( index != 1){
minCostPeriod = min(tableBackward[,index-1][which(tableBackward[,index-1] > 0)])
vectorIndexes = which(tableBackward[,index-1] == minCostPeriod)
ifelse(length(vectorIndexes) != 1, print("The problem has at least two solutions"), print(''))
index <- vectorIndexes[1]
periodQ <- append(periodQ, index)
}
revPeriodQ <- rev(periodQ)
quantityToOrder <- rep(0,noPeriods)
for(i in 1:(length(revPeriodQ)-1)){
from <- revPeriodQ[i]
to <- revPeriodQ[i+1]-1
quantityToOrder[from] <- sum(demand[from:to])
}
if( revPeriodQ[length(revPeriodQ)] == noPeriods){
quantityToOrder[noPeriods] <- demand[length(demand)]
}else{
quantityToOrder[ revPeriodQ[length(revPeriodQ)] ] = sum(demand[revPeriodQ[length(revPeriodQ)]:noPeriods])
}
#print(quantityToOrder)
# --- COSTS PER PERIOD ----
inventory <- rep(0, noPeriods)#units
orderCost <- rep(0, noPeriods)
for(i in 1:noPeriods){
if( i == 1 ){
invLastPeriod = 0;
}else{
invLastPeriod =  inventory[i-1] ;
}
inventory[i] = invLastPeriod + quantityToOrder[i] - demand[i]
if(quantityToOrder[i] != 0){
orderCost[i] = orderingCost[i]
}
}
prodCost <- unitCost*quantityToOrder
invCost <- inventory*holdingCost
totalCostPerPeriod <- prodCost+orderCost+invCost
if(sum(totalCostPerPeriod) == min(table[noPeriods+1,noPeriods])){
print("The algorith is run correctly")
}else{
print('There is a problema the cost of the forward and backward operatios are not the same')
}
# Print the table
printableTable <- data.frame(
demand,
quantityToOrder,
inventory,
prodCost,
orderCost,
invCost,
totalCostPerPeriod
)
printableTableTranspose <- as.data.frame(t(as.matrix(printableTable)))
rownames(printableTableTranspose) <- c('Demand','Q','Inventory','Production Cost','Order Cost','Inventory Cost',"Total Cost")
colnames(printableTableTranspose) <- seq(1,noPeriods, by = 1)
print(paste0('The total cost per period is ', sum(totalCostPerPeriod)))
print(printableTableTranspose)
K <- 10 #$
l <- 100 #units/month (mean)
t <- 1.5 #month
i <- 0.1/12 #%/month
p <- 10 #$/units
c <- 10 #$/unit
lt <- l*t
h <- i*c
#used when the l ~ Exp(lambda). Remember mean = 1/lambda (see exponential distribution)
lambda = 1/l
#j = 0
nR = 0
Q0 = sqrt( (2*l*(K + p*nR)) / h )
R0 <- -log(1- (1-((Q0*h)/(p*l))) )/lambda
expectedShortUnitsExp <- integrate(function(y) { (y - R0)*(lambda)*exp(-(lambda)*y) }, lower = R0, upper = Inf)
nR0 <- expectedShortUnitsExp$value
l
lambda
K <- 10 #$
l <- 100 #units/month (mean)
t <- 1.5 #month
i <- 0.1/12 #%/month
p <- 10 #$/units
c <- 10 #$/unit
lt <- l*t
h <- i*c
#used when the l ~ Exp(lambda). Remember mean = 1/lambda (see exponential distribution)
lambda = 1/l
#j = 0
nR = 0
Q0 = sqrt( (2*l*(K + p*nR)) / h )
R0 <- -log(1- (1-((Q0*h)/(p*l))) )/lambda
expectedShortUnitsExp <- integrate(function(y) { (y - R0)*(lambda)*exp(-(lambda)*y) }, lower = R0, upper = Inf)
nR0 <- expectedShortUnitsExp$value
#j = 1
Q1 = sqrt( (2*l*(K + p*nR0)) / h )
R1 <- -log(1- (1-((Q1*h)/(p*l))) )/lambda
expectedShortUnitsExp <- integrate(function(y) { (y - R1)*(lambda)*exp(-(lambda)*y) }, lower = R1, upper = Inf)
nR1 <- expectedShortUnitsExp$value
#j = 2
Q2 = sqrt( (2*l*(K + p*nR1)) / h )
R2 <- -log(1- (1-((Q2*h)/(p*l))) )/lambda
expectedShortUnitsExp <- integrate(function(y) { (y - R2)*(lambda)*exp(-(lambda)*y) }, lower = R2, upper = Inf)
nR2 <- expectedShortUnitsExp$value
#j = 3
Q3 = sqrt( (2*l*(K + p*nR2)) / h )
R2 <- -log(1- (1-((Q3*h)/(p*l))) )/lambda
expectedShortUnitsExp <- integrate(function(y) { (y - R3)*(lambda)*exp(-(lambda)*y) }, lower = R3, upper = Inf)
nR3 <- expectedShortUnitsExp$value
#j = 4
Q4 = sqrt( (2*l*(K + p*nR3)) / h )
R4 <- -log(1- (1-((Q4*h)/(p*l))) )/lambda
expectedShortUnitsExp <- integrate(function(y) { (y - R4)*(lambda)*exp(-(lambda)*y) }, lower = R4, upper = Inf)
nR4 <- expectedShortUnitsExp$value
#j = 5
Q5 = sqrt( (2*l*(K + p*nR4)) / h )
R5 <- -log(1- (1-((Q5*h)/(p*l))) )/lambda
expectedShortUnitsExp <- integrate(function(y) { (y - R5)*(lambda)*exp(-(lambda)*y) }, lower = R5, upper = Inf)
nR5 <- expectedShortUnitsExp$value
#j = 6
Q6 = sqrt( (2*l*(K + p*nR5)) / h )
R6 <- -log(1- (1-((Q6*h)/(p*l))) )/lambda
expectedShortUnitsExp <- integrate(function(y) { (y - R6)*(lambda)*exp(-(lambda)*y) }, lower = R6, upper = Inf)
nR6 <- expectedShortUnitsExp$value
#j = 7
Q7 = sqrt( (2*l*(K + p*nR6)) / h )
R7 <- -log(1- (1-((Q7*h)/(p*l))) )/lambda
expectedShortUnitsExp <- integrate(function(y) { (y - R7)*(lambda)*exp(-(lambda)*y) }, lower = R7, upper = Inf)
nR7 <- expectedShortUnitsExp$value
#j = 8
Q8 = sqrt( (2*l*(K + p*nR7)) / h )
R8 <- -log(1- (1-((Q8*h)/(p*l))) )/lambda
expectedShortUnitsExp <- integrate(function(y) { (y - R8)*(lambda)*exp(-(lambda)*y) }, lower = R8, upper = Inf)
nR8 <- expectedShortUnitsExp$value
#j = 9
Q9 = sqrt( (2*l*(K + p*nR8)) / h )
R9 <- -log(1- (1-((Q9*h)/(p*l))) )/lambda
expectedShortUnitsExp <- integrate(function(y) { (y - R9)*(lambda)*exp(-(lambda)*y) }, lower = R9, upper = Inf)
nR9 <- expectedShortUnitsExp$value
#j = 10
Q10 = sqrt( (2*l*(K + p*nR9)) / h )
R10 <- -log(1- (1-((Q10*h)/(p*l))) )/lambda
expectedShortUnitsExp <- integrate(function(y) { (y - R10)*(lambda)*exp(-(lambda)*y) }, lower = R10, upper = Inf)
nR10 <- expectedShortUnitsExp$value
## Policy
Qopt = Q10
Ropt = R10
nRopt = nR10
#### b) ---------
beta = 1-(nRopt/Qopt)
# Determine the Q* with uniform distribution -------->>>>>>
purchase <- 2
sellingPrice <- 8
penalty <- 1
cu <- sellingPrice - purchase
co <- purchase + penalty
criticalRatio =cu/(co+cu)
a <- 200
b <- 400
Qopt = a + criticalRatio*(b-a) # Buscamos en su libro de estadística
Q = Qopt
# Expected unsold units (sobrantes) x = demand
expectedUnsoldUnits <- function(x) { (Q - x)*(1/(b-a)) }
unsoldUnits <- integrate(expectedUnsoldUnits, lower = a, upper = Qopt)
# Expected units of short units (faltantes) y = demand
expectedShortUnits <- function(y) { (y - Q)*(1/(b-a)) }
shortUnits <- integrate(expectedShortUnits,lower = Qopt, upper = b)
totalCost <- cu*shortUnits$value + co*unsoldUnits$value
totalCost
print(paste0("Average overage units: ", unsoldUnits$value))
print(paste0("Average underage units: ", shortUnits$value))
print(paste0("Average overage cost: ", co*unsoldUnits$value))
print(paste0("Average underage cost: ", cu*shortUnits$value))
ExpectedProfitOpt <- (sellingPrice - purchase)*Qopt - totalCost
print(paste0("Expected Profit : ", ExpectedProfitOpt))
#If Q = 300
Q = 300
# Expected unsold units (sobrantes) x = demand
expectedUnsoldUnits <- function(x) { (Q - x)*(1/(b-a)) }
unsoldUnits <- integrate(expectedUnsoldUnits, lower = a, upper = Q)
# Expected units of short units (faltantes) y = demand
expectedShortUnits <- function(y) { (y - Q)*(1/(b-a)) }
shortUnits <- integrate(expectedShortUnits,lower = Q, upper = b)
totalCost <- cu*shortUnits$value + co*unsoldUnits$value
totalCost
print(paste0("Average overage units: ", unsoldUnits$value))
print(paste0("Average underage units: ", shortUnits$value))
print(paste0("Average overage cost: ", co*unsoldUnits$value))
print(paste0("Average underage cost: ", cu*shortUnits$value))
ExpectedProfitQ <- (sellingPrice - purchase)*Q - totalCost
print(paste0("Expected Profit : ", ExpectedProfitQ))
K <- 200
c = 5
i = 0.2
h = i*c
p = 4
lambda = 10000
lambdaTau = 400
sigmaTau = 30
tau = lambdaTau/lambda
R = 400
#nR = L(z)*sigmaTau, z = (R-lambdaTau)/sigmaTau
z = (R - lambdaTau)/sigmaTau
lossFunctionNormal <- function(x){exp(-(x^2)/2)/(sqrt(2*pi)) - x*(1-pnorm(x))}
nR = lossFunctionNormal( z )*sigmaTau # L(z)*sigmaTau
Q = sqrt( (2*lambda*(K + p*nR)) / h )
#costSortage = pi*nR*(lambda/Q)
costSortage = p*nR*(lambda/Q)
# 1 - beta = nR/Q
unmetDemand = (nR/Q)*100
c <- 20#$/un
K <- 150#$
i = 0.3 #%/mes
pi <- 50#$/unidad
h <- i*c
a <- 100
b <- 200
lambda <- 6000
# j = 0
nR = 0
Q0 = sqrt( (2*lambda*(K + pi*nR)) / h )
R0 <- a + ( 1- ((Q0*h)/(pi*lambda)) )*(b-a)
expectedShortUnits <- integrate(function(D){ (D-R0)*(1/(b-a)) },
lower = R0,
upper = b)
nR0 <- expectedShortUnits$value
# j = 1
Q1 = sqrt( (2*lambda*(K + pi*nR0)) / h )
R1 <- a + ( 1- ((Q1*h)/(pi*lambda)) )*(b-a)
expectedShortUnits <- integrate(function(D){ (D-R1)*(1/(b-a)) },
lower = R1,
upper = b)
nR1 <- expectedShortUnits$value
# j = 2
Q2 = sqrt( (2*lambda*(K + pi*nR1)) / h )
R2 <- a + ( 1- ((Q2*h)/(pi*lambda)) )*(b-a)
expectedShortUnits <- integrate(function(D){ (D-R2)*(1/(b-a)) },
lower = R2,
upper = b)
nR2 <- expectedShortUnits$value
# j = 3
Q3 = sqrt( (2*lambda*(K + pi*nR2)) / h )
R3 <- a + ( 1- ((Q3*h)/(pi*lambda)) )*(b-a)
expectedShortUnits <- integrate(function(D){ (D-R3)*(1/(b-a)) },
lower = R3,
upper = b)
nR3 <- expectedShortUnits$value
# j = 4
Q4 = sqrt( (2*lambda*(K + pi*nR3)) / h )
R4 <- a + ( 1- ((Q4*h)/(pi*lambda)) )*(b-a)
expectedShortUnits <- integrate(function(D){ (D-R4)*(1/(b-a)) },
lower = R4,
upper = b)
nR4 <- expectedShortUnits$value
# j = 5
Q5 = sqrt( (2*lambda*(K + pi*nR4)) / h )
R5 <- a + ( 1- ((Q5*h)/(pi*lambda)) )*(b-a)
expectedShortUnits <- integrate(function(D){ (D-R5)*(1/(b-a)) },
lower = R5,
upper = b)
nR5 <- expectedShortUnits$value
# j = 6
Q6 = sqrt( (2*lambda*(K + pi*nR5)) / h )
R6 <- a + ( 1- ((Q6*h)/(pi*lambda)) )*(b-a)
expectedShortUnits <- integrate(function(D){ (D-R6)*(1/(b-a)) },
lower = R6,
upper = b)
nR6 <- expectedShortUnits$value
Qopt <- Q6
Ropt <- R6
nRopt <- nR6
#safetyStock = R - lambdaTau
safetyStock <- Ropt - lambdaTau
#totalCost
totalCost <- lambda*c +
K*(lambda/Qopt) +
h*(0.5*Qopt + safetyStock) +
pi*nRopt*(lambda/Qopt)
#safetyStock = R - lambdaTau
safetyStock <- Ropt - 150
#totalCost
totalCost <- lambda*c +
K*(lambda/Qopt) +
h*(0.5*Qopt + safetyStock) +
pi*nRopt*(lambda/Qopt)
K = 300
c = 40
i = 0.2/52
p = 2
tau = 2
lambda = 500
sigma = sqrt(2500)
lambdaTau = lambda*tau
sigmaTau = sigma*sqrt(tau)
h = i*c
# if nR = 0
Q = sqrt(2*K*lambda/h)
R = qnorm( 1- ((Q*h)/(p*lambda)  ), lambdaTau, sigmaTau )
serviceLevel <- pnorm(R, lambdaTau, sigmaTau, TRUE)
lossFunctionNormal <- function(x){exp(-(x^2)/2)/(sqrt(2*pi)) - x*(1-pnorm(x))}
lossFunctionValue <- lossFunctionNormal(  qnorm( 1- ((Q*h)/(p*lambda))) ) #exactly the same as the below equations
#z = (R-lambdaTau)/sigmaTau
#lossFunctionValue <- lossFunctionNormal( z )
fillRate <- 1 - (lossFunctionValue*sigmaTau/Q)
# average inv
#two options, the same result
#Option 1
avgInventory = 0.5*Q + (R - lambdaTau)
#Option 2
#z = (R-lambdaTau)/sigmaTau
#avgInventory = 0.5*Q + z*sigmaTau
Q = sqrt(2*K*lambda/h)
R = qnorm( 1- ((Q*h)/(p*lambda)  ), lambdaTau, sigmaTau )
serviceLevel <- pnorm(R, lambdaTau, sigmaTau, TRUE)
fillRate <- 1 - (lossFunctionValue*sigmaTau/Q)
# average inv
#two options, the same result
#Option 1
avgInventory = 0.5*Q + (R - lambdaTau)
K = 400
c = 500
i = 0.2
p = 5000
tau = 5/12
T = 2/12
lambda = 15
sigma = 5
lambdaTau = lambda*(tau + T)
sigmaTau = sigma*sqrt(tau + T)
h = i*c
#One
Q = lambdaTau
R = qnorm( 1- ((Q*h)/(p*lambda)), lambdaTau, sigmaTau )
S = R
# z = (R-lambdaTau)/sigmaTau)
serviceLevel <- pnorm(R, lambdaTau, sigmaTau, TRUE)
lossFunctionNormal <- function(x){exp(-(x^2)/2)/(sqrt(2*pi)) - x*(1-pnorm(x))}
lossFunctionValue <- lossFunctionNormal(  qnorm( 1- ((R*h)/(p*lambda))) )
fillRate <- 1 - (lossFunctionValue*sigmaTau/lambdaTau)
# safety stock = z*sigmaTau
z = (R-lambdaTau)/sigmaTau
safetyStock = z*sigmaTau
#Option 2
#safetyStock = qnorm(serviceLevel)*sigmaTau
